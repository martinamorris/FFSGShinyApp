type = "l",
col = "grey",
xlab = "Year",
ylab = "Total Fatal Events/Million Population",
main = "Police Killings in US by State"
)
lines(2000:(as.integer(format(Sys.Date(), "%Y"))-2), df[df$state_name == "United States", 3:20],
col = "black")
lines(2000:(as.integer(format(Sys.Date(), "%Y"))-2), df[df$state_name == state, 3:20],
col = "red")
legend(
"topright",
legend = c(state, "United States", "Other States"),
lty = c(1, 1),
lwd = c(2.5, 2.5),
col = c("red", "black", "grey"),
text.col = "black",
bty = "n",
cex = 0.75
)
}else{
plot(
2000:(as.integer(format(Sys.Date(), "%Y"))-2),
df[df$state_name == state, 3:20],
type = "l",
col = "red",
xlab = "Year",
ylab = "Total Fatal Events/Million Population",
main = paste("Total Police Killings in", state, sep = " ")
)
}
}
}
permillgraph("Washington")
permillgraph("Washington", capita = TRUE)
permillgraph("Washington", capita = TRUE, all = TRUE)
permillgraph("United States", capita = TRUE, all = TRUE)
permillgraph("United States", capita = FALSE, all = TRUE)
library(dplyr)
library(tidyr)
library(leaflet)
library(ggplot2)
library(DT)
source("R/permillcalculation.R")
load("extdata/fe.clean.Rdata")
fatalencounters <- fe.clean
x = fatalencounters
#filters data for state
festate <- x %>%
filter(state == "WA")
#finds fatal encounters by race over years
state_race <- festate %>%
group_by(year) %>%
count(race) %>%
spread(year, n)
state_race[is.na(state_race)] <- 0 #replaces NA with 0
#finds fatal encounters by race over years
state_gender <- festate %>%
group_by(year) %>%
count(sex) %>%
spread(year, n)
state_gender[is.na(state_gender)] <- 0 #replaces NA with 0
state_city <- festate %>%
group_by(year) %>%
count(city) %>%
spread(year, n)
state_city[is.na(state_city)] <- 0 #replaces NA with 0
state_city$Total = rowSums(state_city[,2:20])
top10 <- state_city %>%
arrange(desc(Total)) %>%
top_n(10, Total) %>%
select(city, Total)
top10dt <- datatable(top10)
top10_bar <- ggplot(top10, aes(city, Total))+geom_bar(stat = "identity")
##get rank function
getrank <- function(stateabbr, capita = TRUE) {
festates <- permillcalc(capita=capita)
if(capita == TRUE) {
festates <- festates %>%
select(state, mean) %>%
arrange(desc(mean))
} else {
festates <- festates %>%
select(state, Total) %>%
arrange(desc(Total))
}
rank <- which(festates$state == stateabbr)
return(rank)
}
## Create Table of Metrics
counts <- permillcalc(capita = FALSE)
capita <- permillcalc(capita = TRUE)
state_capita <- capita[which(capita$state == "WA"),]
state_counts <- counts[which(counts$state == "WA"),]
Metric <- c("In 2017", "Since 2000", "Rank")
Capita <- c(state_capita$p2017, state_capita$mean, getrank("WA", capita = TRUE))
Counts <- c(state_counts$p2017, state_counts$Total, getrank("WA", capita = FALSE))
Metrics <- data.frame(Metric, Counts, Capita)
Metric_DT <- datatable(Metrics)
##Map
leaflet(festate) %>% addTiles() %>%
addMarkers(lng = ~longitude, lat = ~latitude, clusterOptions = markerClusterOptions())
#Create plot
linegraph_state <- function(filter){
if(filter == "none") {
permillgraph("Washington", FALSE,FALSE)
}else if(filter == "race") {
matplot(2000:2017, t(state_race[, 2:19]), type = c("b"),pch=1,col = 1:6, ylab = "Fatal Encounters", xlab = "Year") #plot
legend("topleft", legend = c("African-American/Black", "Asian/Pacific Islander", "European-American/White", "Hispanic/Latino", "Native American/Alaskan", "Unspecified"), col=1:6, pch=1) # optional legend
}else{
matplot(2000:2017, t(state_gender[, 2:19]), type = c("b"),pch=1,col = 1:3, ylab = "Fatal Encounters", xlab = "Year") #plot
legend("topleft", legend = c("Female", "Male", "Unspecified"), col=1:3, pch=1) # optional legend
}
}
globalVariables(c("year"))
counts <- permillcalc(capita = FALSE)
count <- permillcalc(capita = FALSE)
capita <- permillcalc(capita = TRUE)
state_capita <- capita[which(capita$state == "WA"),]
state_counts <- count[which(count$state == "WA"),]
library(tidyr)
library(dplyr)
#------------------------------censusdata---------------------------------------------------
## @knitr popdata
load("extdata/Pop.Rdata")
reorder_pop_state <- state_pops[order(state_pops$state_abb), ]
pop_state_and_us <- rbind(reorder_pop_state, all_pops[1, ])
pop_state_and_us_mill <- pop_state_and_us[, 3:20] / 1000000
#-----------------------------fatal encounters data-------------------------------------
## @knitr fedata
load("extdata/fe.clean.Rdata")
fatalencounters <- fe.clean
#------------------------------function-----------------------------------------------
#' PerMillCalc
#'
#' Calculates the fatal encounters (per million population or total) for each state
#'
#' @param x a data frame of individual fatal encounter cases, default uses fatalencounters
#' @param capita a boolean, if TRUE evaluates cases per million population of each state, if FALSE calculates total cases, default is TRUE
#' @return table a data frame of fatal encounters per state (evaluated per capita or as totals based on capita parameter)
#'
#' @export
## @knitr permcalc
permillcalc <- function(x = fatalencounters, capita = TRUE){
##create table of state by year counts
kdata <- x %>%
group_by(year) %>%
count(state) %>%
spread(year, n)
#change NA values (where no data matched) to 0
kdata[is.na(kdata)] <- 0
#Calculate US total
kdata["Total" , ][, -1] <- colSums(kdata[, -1])
kdata$state <- as.character(kdata$state)
kdata[52,1] <- "US"
#add full state names
kdata <- cbind(pop_state_and_us[, 1], kdata)
colnames(kdata)[1] <- "state_name"
if(capita){
#calculate deaths per million population
kpm <- kdata[, -c(1:2,21:22)] / pop_state_and_us_mill
#find avegages over all years
kpm <- cbind(kdata[, 1:2], kpm, rowMeans(kpm))
colnames(kpm)[21] <- "mean"
table <- kpm
}else{
table <- cbind(kdata, rowSums(counts[,3:20]))
colnames(table)[colnames(table)=="rowSums(counts[, 3:20])"] <- "Total"
}
colnames(table)[1] <- "state_name"
colnames(table)[3:20] <- stringr::str_c("p",colnames(table)[3:20])
return(table)
}
permillcalc(capita = FALSE)
count <- permillcalc(capita = FALSE)
capita <- permillcalc(capita = TRUE)
state_capita <- capita[which(capita$state == "WA"),]
state_counts <- count[which(count$state == "WA"),]
library(tidyr)
library(dplyr)
#------------------------------censusdata---------------------------------------------------
## @knitr popdata
load("extdata/Pop.Rdata")
reorder_pop_state <- state_pops[order(state_pops$state_abb), ]
pop_state_and_us <- rbind(reorder_pop_state, all_pops[1, ])
pop_state_and_us_mill <- pop_state_and_us[, 3:20] / 1000000
#-----------------------------fatal encounters data-------------------------------------
## @knitr fedata
load("extdata/fe.clean.Rdata")
fatalencounters <- fe.clean
#------------------------------function-----------------------------------------------
#' PerMillCalc
#'
#' Calculates the fatal encounters (per million population or total) for each state
#'
#' @param x a data frame of individual fatal encounter cases, default uses fatalencounters
#' @param capita a boolean, if TRUE evaluates cases per million population of each state, if FALSE calculates total cases, default is TRUE
#' @return table a data frame of fatal encounters per state (evaluated per capita or as totals based on capita parameter)
#'
#' @export
## @knitr permcalc
permillcalc <- function(x = fatalencounters, capita = TRUE){
##create table of state by year counts
kdata <- x %>%
group_by(year) %>%
count(state) %>%
spread(year, n)
#change NA values (where no data matched) to 0
kdata[is.na(kdata)] <- 0
#Calculate US total
kdata["Total" , ][, -1] <- colSums(kdata[, -1])
kdata$state <- as.character(kdata$state)
kdata[52,1] <- "US"
#add full state names
kdata <- cbind(pop_state_and_us[, 1], kdata)
colnames(kdata)[1] <- "state_name"
if(capita){
#calculate deaths per million population
kpm <- kdata[, -c(1:2,21:22)] / pop_state_and_us_mill
#find avegages over all years
kpm <- cbind(kdata[, 1:2], kpm, rowMeans(kpm))
colnames(kpm)[21] <- "mean"
table <- kpm
}else{
table <- cbind(kdata, rowSums(kdata[,3:20]))
colnames(table)[colnames(table)=="rowSums(kdata[, 3:20])"] <- "Total"
}
colnames(table)[1] <- "state_name"
colnames(table)[3:20] <- stringr::str_c("p",colnames(table)[3:20])
return(table)
}
count <- permillcalc(capita = FALSE)
capita <- permillcalc(capita = TRUE)
state_capita <- capita[which(capita$state == "WA"),]
state_counts <- count[which(count$state == "WA"),]
Metric <- c("In 2017", "Since 2000", "Rank")
Capita <- c(state_capita$p2017, state_capita$mean, getrank("WA", capita = TRUE))
Counts <- c(state_counts$p2017, state_counts$Total, getrank("WA", capita = FALSE))
Metrics <- data.frame(Metric, Counts, Capita)
Metric_DT <- datatable(Metrics)
##Mapp
countydata <- festate %>%
group_by(year) %>%
count(county) %>%
spread(year, n)
countydata[is.na(state_city)] <- 0 #replaces NA with 0
countydata$Total = rowSums(state_city[,2:20])
##Mapp
countydata <- fatalencounters %>%
filter(state == "WA") %>%
group_by(county) %>%
count()
View(countydata)
countydata %>%
left_join(counties, by = "county_fips") %>%
filter(state_name =="Washington") %>%
ggplot(mapping = aes(long, lat, group = group, fill = n)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradientn(labels = scales::percent,
guide = guide_colorbar(title.position = "top")) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "n") +
theme_urban_map()
countydata %>%
left_join(county, by = "county_fips") %>%
filter(state_name =="Washington") %>%
ggplot(mapping = aes(long, lat, group = group, fill = n)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradientn(labels = scales::percent,
guide = guide_colorbar(title.position = "top")) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "n") +
theme_urban_map()
countydata %>%
filter(state_name =="Washington") %>%
ggplot(mapping = aes(long, lat, group = group, fill = n)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradientn(labels = scales::percent,
guide = guide_colorbar(title.position = "top")) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "n") +
theme_urban_map()
countydata %>%
ggplot(mapping = aes(long, lat, group = group, fill = n)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradientn(labels = scales::percent,
guide = guide_colorbar(title.position = "top")) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "n") +
theme_urban_map()
countydata %>%
ggplot(mapping = aes(long, lat, group = group, fill = n)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradientn(labels = scales::percent,
guide = guide_colorbar(title.position = "top"), colors = c(blue, red)) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "n") +
theme_urban_map()
countydata %>%
ggplot(mapping = aes(long, lat, group = group, fill = n)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradientn(labels = scales::percent,
guide = guide_colorbar(title.position = "top"), colors = blues9) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "n") +
theme_urban_map()
devtools::install_github(“UrbanInstitute/urbnmapr”)
devtools::install_github(“UrbanInstitute/urbnmapr”)
devtools::install_github(UrbanInstitute/urbnmapr)
library(devtools)
devtools::install_github(“UrbanInstitute/urbnmapr”)
countydata %>%
ggplot(mapping = aes(long, lat, group = group, fill = n)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradientn(labels = scales::percent,
guide = guide_colorbar(title.position = "top"), colors = blues9) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "n")
fatalencounters %>%
filter(state_name =="Washington") %>%
ggplot(mapping = aes(long, lat, group = group, fill = n)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradientn(labels = scales::percent,
guide = guide_colorbar(title.position = "top")) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "n") +
theme_urban_map()
counties <- map_data("county")
wa_county <- subset(counties, region == "Washington")
wa_base <- ggplot(data = festate, mapping = aes(x = longitude, y = latitude, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "gray")
wa_base + theme_nothing()
wa_base
wa_base <- ggplot(data = festate, mapping = aes(x = longitude, y = latitude, group = county)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "gray")
wa_base
library(plotly)
p <- cali_pop %>%
group_by(group) %>%
plot_mapbox(x = ~long, y = ~lat, color = ~pop_cat, colors = c('#ffeda0','#f03b20'),
text = ~subregion, hoverinfo = 'text', showlegend = FALSE) %>%
add_polygons(
line = list(width = 0.4)
) %>%
add_polygons(fillcolor = 'transparent',
line = list(color = 'black', width = 0.5),
showlegend = FALSE, hoverinfo = 'none'
) %>%
layout(
xaxis = list(title = "", showgrid = FALSE, showticklabels = FALSE),
yaxis = list(title = "", showgrid = FALSE, showticklabels = FALSE),
mapbox = list(
style = 'light',
zoom = 4,
center = list(lat = ~median(lat), lon = ~median(long))),
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
shiny::runApp()
racepi <- fatalencounters %>%
count(race)
View(racepi)
>pie
?pie
pie(racepi$n,racepi$race)
racepi$n[1]
racepi$n[1,5]
racepi$n[c(1,5)]
pie(racepi$n[c(1,5,3,6,4,7,2)],racepi$race[c(1,5,3,6,4,7,2)])
library(dplyr)
library(tidyr)
library(leaflet)
library(ggplot2)
library(DT)
source("R/permillcalculation.R")
load("extdata/fe.clean.Rdata")
fatalencounters <- fe.clean
x = fatalencounters
#filters data for state
festate <- x %>%
filter(state == "WA")
#finds fatal encounters by race over years
state_race <- festate %>%
group_by(year) %>%
count(race) %>%
spread(year, n)
state_race[is.na(state_race)] <- 0 #replaces NA with 0
#finds fatal encounters by race over years
state_gender <- festate %>%
group_by(year) %>%
count(sex) %>%
spread(year, n)
state_gender[is.na(state_gender)] <- 0 #replaces NA with 0
state_city <- festate %>%
group_by(year) %>%
count(city) %>%
spread(year, n)
state_city[is.na(state_city)] <- 0 #replaces NA with 0
state_city$Total = rowSums(state_city[,2:20])
top10 <- state_city %>%
arrange(desc(Total)) %>%
top_n(10, Total) %>%
select(city, Total)
top10dt <- datatable(top10)
top10_bar <- ggplot(top10, aes(city, Total))+geom_bar(stat = "identity")
##get rank function
getrank <- function(stateabbr, capita = TRUE) {
festates <- permillcalc(capita=capita)
if(capita == TRUE) {
festates <- festates %>%
select(state, mean) %>%
arrange(desc(mean))
} else {
festates <- festates %>%
select(state, Total) %>%
arrange(desc(Total))
}
rank <- which(festates$state == stateabbr)
return(rank)
}
## Create Table of Metrics
count <- permillcalc(capita = FALSE)
capita <- permillcalc(capita = TRUE)
state_capita <- capita[which(capita$state == "WA"),]
state_counts <- count[which(count$state == "WA"),]
Metric <- c("In 2017", "Since 2000", "Rank")
Capita <- c(state_capita$p2017, state_capita$mean, getrank("WA", capita = TRUE))
Counts <- c(state_counts$p2017, state_counts$Total, getrank("WA", capita = FALSE))
Metrics <- data.frame(Metric, Counts, Capita)
Metric_DT <- datatable(Metrics)
##Choropleth
countyData <- fatalencounters %>%
filter(state == "WA", county != "Clallam Bay") %>%
group_by(county) %>%
count()
countyData$county <- fips("WA", county = countyData$county)
colnames(countyData) <- c("fips", "number_values")
plot_usmap( data = countyData , values = "number_values", include = "WA", lines = "red") +
scale_fill_continuous( low = "white", high = "red", name = "Fatal encounter", label = scales::comma) +
labs(title = "Washington state")
##Map
leaflet(festate) %>% addTiles() %>%
addMarkers(lng = ~longitude, lat = ~latitude, clusterOptions = markerClusterOptions())
#Create plot
linegraph_state <- function(filter){
if(filter == "none") {
permillgraph("Washington", FALSE,FALSE)
}else if(filter == "race") {
matplot(2000:2017, t(state_race[, 2:19]), type = c("b"),pch=1,col = 1:6, ylab = "Fatal Encounters", xlab = "Year") #plot
legend("topleft", legend = c("African-American/Black", "Asian/Pacific Islander", "European-American/White", "Hispanic/Latino", "Native American/Alaskan", "Unspecified"), col=1:6, pch=1) # optional legend
}else{
matplot(2000:2017, t(state_gender[, 2:19]), type = c("b"),pch=1,col = 1:3, ylab = "Fatal Encounters", xlab = "Year") #plot
legend("topleft", legend = c("Female", "Male", "Unspecified"), col=1:3, pch=1) # optional legend
}
}
globalVariables(c("year"))
knitr::opts_chunk$set(echo = TRUE)
source("StateReportCalcs.R")
knitr::opts_chunk$set(echo = TRUE)
source(StateReportCalcs.R)
knitr::opts_chunk$set(echo = TRUE)
source('StateReportCalcs.R')
knitr::opts_chunk$set(echo = TRUE)
source('StateReportCalcs.R')
knitr::opts_chunk$set(echo = TRUE)
source('/StateReportCalcs.R')
knitr::opts_chunk$set(echo = TRUE)
source('R/StateReportCalcs.R')
knitr::opts_chunk$set(echo = TRUE)
source('../R/StateReportCalcs.R')
knitr::opts_chunk$set(echo = TRUE)
source('StateReportCalcs.R')
getwd()
source('R/StateReportCalcs.R')
source('R/StateReportCalcs.R')
#source('R/StateReportCalcs.R')
source('R/permillcalculation.R')
#source('R/StateReportCalcs.R')
source('R/permillcalculation.R')
#source('R/StateReportCalcs.R')
source('R/permillcalculation.R')
#source('R/StateReportCalcs.R')
source("R/permillcalculation.R")
source("R/permillcalculation.R")
?file
source("R/permillcalculation.R")
setwd("C:/Users/maddi/Desktop/FFSGShinyApp")
source("R/permillcalculation.R")
source("/R/permillcalculation.R")
source("permillcalculation.R")
source("R/permillcalculation.R")
source("C:/Users/maddi/Desktop/FFSGShinyApp/R/permillcalculation.R")
source(R/permillcalculation.R)
#source('R/StateReportCalcs.R')
source("R/permillcalculation.R")
